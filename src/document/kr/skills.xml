<?xml version="1.0" encoding="utf-8"?>
<skills>
    <skill id="java">
        <title>자바 기술</title>
        <list>
            <subject>Java 버젼</subject>
            <content>자바 8의 <bold>functional interface</bold>을 기반을 한<bold>stream 프로세싱</bold>, <bold>Consumer/Supplier, Lambda Function</bold>과 <bold>bi-functions</bold> 기능을 활용.</content>
            <content>자바 17의 immutable 오브젝트을 위한 <bold>record 클라스</bold>(JDK 14+), 보완된 switch statement, 그리고 접근 제한을 구현하기 위한<bold>sealed 클라스</bold></content>
        </list>
        <list>
            <subject>Springboot MVC</subject>
            <content><bold>모델, 뷰, 컨트롤러</bold>의 기법으로, <bold>Filter</bold>로 처리된 사용자의 요청에 따라 컨트롤러를 정의하고 요청에 따른 비지니스 모델을 생성해 다시 사용자에게 뷰를 제공해주는 웹 어플리케이션 제작.</content>
            <content>백엔드 서버에서 프론트엔드의 렌더링을 수행하기 위해 <bold>JSP</bold> 와 <bold>JSTL</bold> 을 사용하여 풀스택 퀴즈 서비스 구현.</content>
        </list>
        <list>
            <subject>Spring Bean 선언 및 관리</subject>
            <content><bold>@Qualifier, @Primary</bold>로 메서드 이름이 같은 Bean의 인젝션 우선순위를 설정</content>
            <content>XML configuration으로 인한 컴포넌트 로드 선언이나 <bold>@ComponentScan</bold>을 사용하여 Bean의 사용을 가능하게 함</content>
            <content><bold>@Service, @Component, @Configuration, @Repository</bold>의 선언으로 클라스의 레이어 정의와 동시에 bean을 설정하여 편히라게 데펜던시 인젠션을 수행 할 수 있게 함</content>
            <content>빈 인젝션 기법 중 자동 디펜던시 인젝션으로 <bold>@Autowrie</bold> 을 사용하고, <bold>immutability</bold>가 보장된 안전 한 방법으로 컨스트럭터 인젠션과 요청시에 인젠션이 이루어지는 <bold>Setter 인젠션</bold>을 사용</content>
            <content>어플리케이션 설정 또는 외부 서비스 연결 설정과 같이 프로그램 작동 이전에 세팅되어야 하는 요소들은 <bold>@Configuration</bold>으로 선언 뒤 메인 클라스 에서 <bold>@EnableAutoConfiguration</bold>을 선언하여 자동으로 @Configuration 컴포넌트를 로드하게 만듬. (<bold>@SpringBootApplication</bold> 선언으로 통합 선언 가능)</content>
        </list>
        <list>
            <subject>Hibernate 레코드 객체 선언</subject>
            <content>DB 레코드의 기본 구조 선언 - <bold>@Entity, @Table, @Column, @Id</bold></content>
            <content><bold>@ManyToMany, @OneToMany, @OneToOne</bold> 어노테이션으로 JPA Hibernate의 데이터 관계를 선언</content>
            <content><bold>CascadeType(PERSIST, MERGE, REMOVE, REFRESH, DETACH, ALL)</bold> 선언으로 관계된 다른 데이터의 처리 방식을 규정</content>
            <content><bold>@JoinTable, @JoinColumn</bold> 어노테이션으로 다른 테이블의 레코드의 일부 칼럼 데이터를 현제 레코드에 포함 할 때 사용</content>
        </list>
        <list>
            <subject>Spring Reactor을 활용한 멀티스레딩</subject>
            <content><bold>WebFlux의 Mono 와 Flux</bold>를 이용한 non-blocking 스트림 프로세싱을 사용하여 조금더 유연한 비동기 작업을 수행</content>
            <content>프로세스 지연시간을 관리하고 독립성, 복제와, 위임의 기능이 내포되어 있어 마이크로 서비스 어플리케이션에 매우 유용한 회복력과 유연성을 제공</content>
            <content>비동기 작업이 요청 될 때에 실행이 되는 Lazy 프로세스로 이벤트 퍼프리싱 방식을 고수하기 때문에 비동기 로직을 짜기 수월하며 자원을 훨 씬 더 유용하게 사용</content>
            <content><bold>"subscribeOn(Schedulers.boundedElastic()), subscribe(), block(), fromSupplier(), fromCallable(), onComplete(), onError()</bold>" 등 다양한 기능들을 제공해 많은 상황에서 유연하게 비동기 작업을 구현 할 수 있게 만듬</content>
        </list>
        <list>
            <subject>스프링을 위한 JDBC template, Hibernate(JPA, HQL), Jooq 활용</subject>
            <content>유연하고 정확한 DB매핑을 위한 다양한 <bold>ORM툴</bold>들을 활용.</content>
            <content>1회성 테스팅 용도를 위해 <bold>Jdbc Template</bold>을 활용화고 <bold>Prepared Statement(parameterized query)</bold>를 접목시켜 SQL 인젝션 어택을 예방.</content>
            <content><bold>OpenFiegn</bold>을 활용한 마이크로 서비스간의 <bold>Synchronous</bold> 소통 구현.</content>
            <content>반복적 Query 요청이 많이 발생할 때 캐시를 효과적으로 다룰 수 있는 <bold>JPA 기반의 Hibernate</bold>를 <bold>Criteria</bold> ORM 기법와 같이 활용</content>
            <content>Java의 데이터 타입의 호환성이 매우 뛰어난 장점을 이용해 다양한 더 효과적으로 Query 로직을 Transaction을 DB로 보내는 <bold>Jooq ORM 프레임워크</bold> 활용.</content>
        </list>
        <list>
            <subject>Spring AOP</subject>
            <content>스프링 AOP의 크로스 커팅 기법을 사용하여 모니터링, 분석, 예외처리, 로그 기능들을 더 효율적으로 다룰 수 있게 <bold>Join Point, Advice, Pointcut, Aspect</bold> 등을 사용</content>
            <content>Controller Exception, Custom Exception</content>
        </list>
        <list>
            <subject>Spring Actuator</subject>
            <content>어플리케이션 상태 체크, 외부 서비스의 상태 보고, 메트릭스 데이터 보고, 그리고 HTTP 트레이싱을 지원하는 스프링 부트의 툴로 어플리케이션의 건강상태를 확인하기 매우 유용하다</content>
        </list>
        <list>
            <subject>Spring Scheduler / Quartz Scheduler</subject>
            <content>획일화되고 통일된 스케줄링 서비스를 위해 <bold>Spring 스케줄러</bold>를 사용</content>
            <content>복잡한 분산 클러스터에서 독립적인 스케줄링을 위해 명시된 jobStore에 의거한<bold> Quartz 스케줄러</bold> 사용</content>
        </list>
        <list>
            <subject>Java Spring 보안</subject>
            <content>메모리 관리와 테스팅으로 서비스 상시 운영 정상화</content>
            <content><bold>Access Control</bold> 제어로 허가된 요청만 처리하고 Controller의 경우 철저한 URL 테스팅으로 권한 소유자 외 접근 확인 및 방지</content>
            <content><bold>Java Authentication & Authorization Service</bold> 구현으로 사용자 요청 권한을 확인하고 접근 및 데이터 수취를 보안 등급에 따라 허용 및 거절</content>
            <content>HTML의 "form" 태그를 권장사용하고, 외부로 부터 입력된 정보를 체크하는 <bold>HtmlEscaper</bold>, Session 쿠기 정보 접근을 방지하는 <bold>HttpOnly 쿠키</bold>를 사용해 <bold>XSS(Cross Site Scripting) 예방</bold></content>
            <content>Spring Security에서 <bold>csrf()</bold> 보안 설정으로 <bold>CSRF(Cross-Site Request Forgery)을 예방</bold></content>
            <content>허용되지 않은 외부 URL/IP에 자료나 데이터의 의존성을 낮추고 서버는 항상 명시된 서버나 로컬 도메인에서 자료를 가져 올 수 있게 <bold>CORS(Cross-Origin Resource Sharing)</bold>를 설정</content>
            <content><bold>Parametrized Query, Prepared statement 혹은 ORM툴</bold>을 사용해 <bold>SQL Injection 예방</bold></content>
            <content>로그인 이후 고유 세션 ID의 재발급으로 허가된 세션 데이터 탈취 방지</content>
            <content>신중한 로그 레벨과 선택과 로그 데이터 감별 및 마스킹으로 민감한 데이터 가시화/유출 방지</content>
            <content>SSL 통신 프로토콜를 위해 <bold>Java Secure Socket Extension</bold>을 활성화. <bold>keytool</bold>로 제작된 private키와 puiblic키를 <bold>java keystore</bold>에 등록하여 사용</content>
            <content><bold>JWT token</bold> 기반의 권한 부여와 접근 제한 및 세션 관리로 사용자의 접근을 안전하게 제어</content>
        </list>
        <list>
            <subject>로깅 기능 활용</subject>
            <content>커스텀 패턴 설정과 환경에 따른 가시성 설정을 XML파일에 선언해 프로그램의 로깅을 더 정확하고 유용하게 활용할 수 있는 <bold>Log4j2</bold> 활용</content>
            <content>간편한 파사드(Facade) 로깅 기법인 <bold>SLF4J</bold>을 사용 하여 빠르고 간편한 로깅툴을 활용</content>
        </list>
        <list>
            <subject>병렬 연산 & 비동기 프로세싱 활용</subject>
            <content><bold>Parallel Stream</bold>으로 자바 스트림의 더 빠르고 즈어진 자원을 최대한 활용하는 프로세스를 적용</content>
            <content><bold>@EnableAsync, @Async</bold> 그리고 <bold>ThreadPoolTaskExecutor</bold>의 선언으로 비동기 프로세스를 실현</content>
            <content>필요시<bold>Atomic</bold> 데이터 타입의 사용으로 비동기 스레드들이 안전하게 공유 변수를 참조 및 변경</content>
            <content>비동기 프로세싱 도중 동기화가 필요한 메서드를 호출 할 때 <bold>synchronized</bold>라는 메서드 락을 선언하여 안전한 스레딩을 제공</content>
        </list>
        <list>
            <subject>디자인 패턴 활용</subject>
            <content><bold>코드 재사용(Reusability)성과 가독성 그리고 이식성</bold>을 극대화 하기 위해 다양한 디자인 패턴을 접목</content>
            <content>코드 중복도를 현저히 떨어뜨리고 <bold>DRY 규칙과 KISS 규칙</bold>을 유지 할 수 있게 됨</content>
            <content>가독성을 향상시키기 위한 controller, configuration, db, service, dao, domain, entity와 같은 레이어별 패키징 설정</content>
        </list>
        <list>
            <subject>데이터 스트리밍</subject>
            <content>DB에서 방대한 량의 데이터를 탐색 할 때 <bold>FecthStream</bold>을 요청하여 순차적 프로세스 처리방식을 도입해 서버 메모리 사용량을 극적으로 줄임.</content>
            <content><bold>Event 스트리밍</bold> 방식을 고수 하여 이벤트 처리가 끝날 때 까지 데이터 프로세싱을 실시간으로 처리</content>
            <content><bold>Event-Driven Architecture</bold>에 많이 활용되어 비동기 프로세싱에 매우 효과적</content>
        </list>
        <list>
            <subject>스레드락 분석 및 방지</subject>
            <content><bold>JStack</bold>을 이용하여 재빠른 스레드락, 데드락을 탐색 및 분석</content>
            <content><bold>JMC, VisualVM</bold>을 이용해서 개발 된 기능의 메모리 유출, 프로세스 락, 자원 사용량 분석</content>
        </list>
        <list>
            <subject>마이크로 서비스를 위한 프레임워크들 활용</subject>
            <content>Eureka</content>
            <content>Gateway</content>
            <content>Cloud Server</content>
            <content>Authentication Server</content>
        </list>
        <list>
            <subject>Web API</subject>
            <content>대표적인 Stateless기반인 <bold>@RestController</bold> 을 활용한 <bold>@GetMapping, @PostMapping, @PutMapping, @DeleteMapping</bold>의 REST API기능들을 등을 지원하여 외부 사용자/ 고객들도 접근이 용이하게 함</content>
            <content><bold>SOAP</bold>을 활용해 내부 어플리케이션 간 API 통신을 주력으로 된 서비스에 적극 활용</content>
            <content><bold>Swagger</bold>로 UI 기반 API 툴을 사용해 로컬테스팅을 보다 쉽게 하고 이후 상위 개발 환경에서 테스터들이 쉽게 데이터를 수정 및 조작 할 수 있게 함</content>
        </list>
        <list>
            <subject>서비스 다운 방지</subject>
            <content><bold>Resilience4j</bold> 의 Retry, RateLimiter, BulkHead, TimeLimiter, Circuit Breaker를 활용하여 마이크로 서비스간의 원활한 통신을 제공해 서비스가 다운되는 일을 방지</content>
            <content>Retry</content>
            <content>RateLimiter</content>
            <content>BulkHead</content>
            <content>TimeLimiter</content>
            <content>Circuit Breaker</content>
        </list>
        <list>
            <subject>서비스간의 커뮤니케이션 및 정보 전달</subject>
            <content>OpenFiegn을 활용한 마이크로 서비스간의 Synchronous 소통 구현</content>
            <content>Kafka</content>
            <content>AMQ</content>
            <content>RabbitMQ</content>
        </list>
        <list>
            <subject>캐시 시스템의 적극 활용</subject>
            <content>Caffeine Cache</content>
            <content>Redis</content>
        </list>
    </skill>
    <skill id="python">
        <title>파이선 기술</title>
        <list>
            <subject>asyncio</subject>
            <content>
                IoT 프로젝트에서 다수의 임베디드 기기의 독립적인 비동기 프로세스 명령을 위해 <bold>asyncio</bold> 라이브러리를 적극적 활용.
            </content>
            <content>
                다른 기기와의 동기화 혹은 절차적 명령수행을 위해 <bold>await</bold> 조건을 <bold>async</bold>함수에 적절히 적용
            </content>
        </list>
        <list>
            <subject>numpy</subject>
            <content>
                <bold>복잡한 수치 계산이나 대규모 데이터 집합에 대한 연산</bold>을 포함하는
                프로젝트에 <bold>Numpy</bold>를 적용, 고성능 수학
                계산이 필요한 프로젝트에 활용.
            </content>
        </list>
        <list>
            <subject>pygame</subject>
            <content>
                <bold>사용자의 입력에 기반된 멀티미디어 애플리케이션</bold>이나,
                프로그램 시연을 위한 그래픽, 사운드 및 기타 핵심 멀티미디어
                기능을 처리하기 위해 <bold>Pygame</bold> 모듈을 사용.
            </content>
        </list>
        <list>
            <subject>matplotlib</subject>
            <content>
                <bold>데이터 시각화</bold>가 필요한 프로젝트에서 <bold>Matplotlib</bold>을 활용해 원시 데이터를
                유의미한 데이터로 변환하여 애니메이션 plot 또는 보고서 plot을 생성.
            </content>
        </list>
        <list>
            <subject>jupyter notebook</subject>
            <content>
                모든 데이터 기반 프로젝트의 실시간 코드,
                <bold>텍스트 문서화, 시각화 및 기타 멀티미디어 리소스를 결합</bold>하는 포괄적인 환경을
                제공하기 위해 활용
            </content>
        </list>
        <list>
            <subject>pandas</subject>
            <content>
                대량의 <bold>데이터셋을 조작하고 분석</bold>하는 프로젝트에 <bold>DataFrames 및 Series와</bold>
                같은 다기능 데이터 구조를 제공하기 위해 테이블화 된 방식으로 데이터를 쉽게 조작.
            </content>
        </list>
        <list>
            <subject>Scrapy</subject>
            <content>
                <bold>웹에서 데이터를 수집</bold>하는 프로젝트에서 <bold>Scrapy</bold>의 고성능 크롤링 도구를 홯용.
                웹 페이지로부터 구조화 된 정보를 추출하여 웹사이트를 스크래핑하는 기능이 필요 할 때 사용함.
            </content>
        </list>
        <list>
            <subject>Requests</subject>
            <content>
                <bold>HTTP 요청</bold>이 포함된 프로젝트에 <bold>Requests</bold> 라이브러리를 시용하여 HTTP 통신을 활용.
            </content>
        </list>
        <list>
            <subject>OpenCV</subject>
            <content>
                컴퓨터 <bold>이미지 처리</bold>에 초점을 맞춘 프로젝트에서 <bold>OpenCV</bold>를 핵심 툴로 이용.
                그래픽스 실습에 주로 사용</content>
        </list>
        <list>
            <subject>Beautiful Soup</subject>
            <content>
                <bold>HTML 및 XML 문서에서 정보를 파싱</bold>하고 추출해야하는 프로젝트에서 <bold>Beautiful Soup</bold>을 수반.
                문서를 Python 객체의 트리로 변환하여 작업을 단순화화여 웹 스크래핑 프로젝트에 해당 툴을 접목시킴.
            </content>
        </list>
    </skill>
    <skill id="front-end">
        <title>프론트 엔드 기술</title>
        <list>
            <subject>React</subject>
            <content>
                동적이면서 웹페이지 <bold>데이터의 실시간 렌더링</bold>을 위해 React를 적극 활용.
            </content>
            <content>
                시간이 걸리거나 값이 자주 바뀌는 프로세싱의 효율적인 렌더링을 위해 <bold>useEffect(hook)</bold>를 사용.
            </content>
            <content>
                고정적 값이나 다른 컴포넌트들이 사용해야 하는 데이터 값을 공유하기 위해 <bold>Context Router</bold>를 사용.
            </content>
            <content>
                <bold>promise 기반의 CRUD HTTP 요청</bold>이나 데이터 전달을 수행하기 위해 <bold>axios</bold>을 활용.
            </content>
            <content>
                Session 기반의 페이지/컴포넌트 로드 이력을 보관하고 사용자의 요청에 따라 세션 데이터를 유지하면서 되돌아가기 기능을 선보이기 위해 <bold>history</bold> 라이브러리를 활용
            </content>
            <content>
                <bold>Local component state, Context API, Redux</bold>와 같은 방법을 활용하여 <bold>상태제어 (state handling)</bold>를 구현.
            </content>
            <content>
                MongoDB의 ORM툴인 <bold>mongoose</bold>을 활용해 <bold>데이터 타입 캐스팅, validation, Query 생성</bold> 기능으로 미들웨어 기능 수행을 가능하게 함
            </content>
        </list>
        <list>
            <subject>웹 사이트 제작의 근본</subject>
            <content>기본적인 웹사이트의 뼈대를 구축하기 위해 <bold>HTML5</bold>을 이용</content>
            <content>HTML을 사용자가 보기 편리하고 더 나은 경험을 전달하기 위해 동적 <bold>CSS3</bold>를 적용. 더 획일화되고 전문화된 css의 명령어(At-Rules, selector, Pseudo-classes, Pseudo-elements)들을 적극 활용</content>
            <content>JavaScript의 응용으로 CSS3의 한계를 보완하기 위해 더 동적인 웹 디자인과 기능을 강화</content>
        </list>
    </skill>
    <skill id="database">
        <title>DB 기술</title>
        <list>
            <subject>관계형 DB</subject>
            <content>복잡한 고객 정보나 중복이 많은 상품 데이터의 효율적인 관리를 위해 <bold>관계형 DB</bold>를 적용</content>
            <content>탐색 성능을 향상시키기 위해 <bold>Primary키 인덱싱과 복합키 인덱싱</bold>을 적용하고 <bold>파티셔닝(혹은 Sharding)</bold> 기술을 적용하여 범위 탐색 속도를 증가시킴</content>
            <content><bold>Foreign key</bold>를 사용해서 특정 데이터와 관계된 다른 테이블 데이터를 연관 패치가 가능하도록 데이터를 구성</content>
            <content>관계과 반복되는 데이터의 Circular Fetch를 방지하기 위해 ORM 툴에서 <bold>Lazy fetch</bold>를 적극 활용</content>
            <content>Many-to-Many에서 효율적인 ORM 관계 매핑을 위해 <bold>bridge table(join)</bold>을 사용해 데이터 탐색을 효과적으로 수행</content>
            <content>다른 테이블과 연계된 데이터셋의 효과적 탐색을 위해 Table Join을 사용하고 메모리를 효율적으로 사용하기 위해 <bold>TempTable기능</bold>을 적극활용</content>
            <content>모든 Row가 Primary 키를 항상 가지게 하고 중복그룹이 없으며 논리적으로 데이터간의 의존성을 줄이는 <bold>3NF(3-Normal Form) 규칙</bold>을 적용</content>
        </list>
        <list>
            <subject>DB 라킹과 MVCC(MultiVersion Concurrency Control)</subject>
            <content>DB에 두개 이상의 엡데이트/쓰기 레코드 요청이 동시에 도착 할 때 가장 최신 내역을 업데이트 하고 싶을때 <bold>Optimistic Lock(Write/Update)</bold>을 사용 - <bold>버전 번호, 시간, 체크섬 기법</bold></content>
            <content>DB의 데이터를 읽을 때 가장 최신의 데이터를 받아와야 할 때 업데이트나 쓰기를 실행 시 데이터 ROW 자체에 락을 걸어 Read 접근을 release 될 때까지 미루는 <bold>Pessimistic Lock</bold>을 사용</content>
            <content>ACID설정에 따른 SQL 서버의 자동 <bold>MVCC 기능인 "Update ~ from ~"</bold>문을 사용</content>
        </list>
        <list>
            <subject>DB 복제</subject>
            <content>CAP 법칙을 비지니스 로직에 따라 고려하여 알맞는 DB 아키텍처를 적용</content>
            <content>데이터 손실을 방지한 data/server <bold>Replication</bold> 기술 적용</content>
        </list>
        <list>
            <subject>MongoDB</subject>
            <content>비즈니스 관련 내용을 다루는 데이터나 유저 이력을 저장하는 용도로 MongoDB 활용.</content>
            <content>DB 스케일링이 용이하고 여러 인스턴스의 Sharding을 지원해 방대한 데이터 자료를 신속하고 정확히 다룰 수 있게 하여 데이터셋이 많이 발생하는 서비스에 사용 </content>
            <content>시간이 지남에 따라 스키마의 구조가 변경되거나 통합 및 분할이 발생 할 경우, 더 효율적으로 데이터를 이전 시킬 수 있어 데이터 구조가 완전히 확립되지 않은 비즈니스 모델에 적용</content>
            <content>간단한 데이터 구조, 관계형이 적은 데이터, JSON 형태를 가지는 데이터에 MongoDB 사용</content>
        </list>
        <list>
            <subject>DynamoDB</subject>
            <content>네스팅 구조를 적게 가지며 테이블간 관계가 비교적 적을 때 <bold>Key-Value 데이터 기반인 DynamoDB</bold>를 적용</content>
            <content>실시간 이벤트 스트리밍 서비스(Kinesis)와 연결하기가 쉬워 이벤트 기반 아키텍처의 DB로 이용</content>
            <content>읽고 쓰기량에 따른 비용 부과 방식으로 저장해야 할 데이터셋이 많고 실시간으로 들어오는 데이터 위주로 프로세싱을 할 때 용이</content>
            <content>ACID 트랜잭션 지원</content>
        </list>
        <list>
            <subject>PostgreSQL</subject>
            <content>데이터간의 관계도가 복잡하고 매우 정교한 데이터 타입을 필요로 할 때 주로 이용.</content>
            <content>JooQ ORM 프레임워크와도 호환성이 매우 뛰어나 특정 어플리케이션용 DB로 선호</content>
        </list>
        <list>
            <subject>MySQL</subject>
            <content>관계형 DB의 기본, 빠른 개발과 기본적으로 제공되는 데이터 타입만 필요로 할 때 사용</content>
        </list>
        <list>
            <subject>H2</subject>
            <content><bold>Severless DB</bold>로 메모리에서 실행되는 임시 DB에 적합. 테스팅, CI/CD 체크, 연습/시연용으로 사용하기 매우 적합</content>
        </list>
    </skill>
    <skill id="os">
        <list>
            <subject>Windows</subject>
            <content>윈도우 기반의 <bold>Batch 스크립트</bold>로 기능 설정 자동화/설치 및 테스트 자동화를 수행하고 강화된 보안 접근이 요구될 때 <bold>PowerShell 스크립트</bold>를 활용</content>
            <content>윈도우에 내장된 <bold>WSL의 기능과 Port Forwarding</bold> 기능으로 Window 자체에서 실행이나 접근이 복잡한 프로그램을 <bold>WSL Linux</bold>로 실행하여 통신을 가능하게 함 - 예) Kafka, Docker, Linux기반의 프로그램</content>
            <content>파일 접근/제한 권한 설정과 직접 접속 권한 제어로 개발자들의 담당 부서에 따라 알맞는 권한 부여</content>
            <content><bold>Inbound/Outbound Firewall 설정, 포트 개방/제한</bold> 설정으로 보안을 강화</content>
        </list>
        <list>
            <subject>Linux</subject>
            <content>유저/그룹에 대한 파일 EXEC, READ, WRITE, DELETE 권한 설정</content>
            <content><bold>Piped Shell scripting</bold>으로 단순하거나 반복적이지만 여러개의 프로세스를 조건에 맞게 한번에 실행</content>
            <content><bold>Symbolic Link</bold>의 사용으로 불필요한 파일복사 방지</content>
            <content>파일 실행을 위한 <bold>CRON Scheduling</bold> 기능을 .sh에 사용</content>
            <content><bold>curl 명령어</bold>를 이용한 직접적 API 요청 기능 테스트</content>
        </list>
    </skill>
    <skill id="cicd">
        <list>
            <subject>깃헙 + 젠킨스</subject>
            <content>Github 플러그인을 사용하여 <bold>Jenkins</bold>의 <bold>빌드와 배포 자동화</bold>를 이용</content>
            <content>코드 배포 오류 방지를 실현하고 안전한 코드 배포 확립</content>
            <content>간단한 코드 테스트 용도로 <bold>Github Action</bold>을 활용</content>
        </list>
        <list>
            <subject>Kubernetes</subject>
            <content>독립적 서버 증축 혹은 축소에 매우 용이한 역활을 해주며 해당 POD나 Node에 문제가 생길 시 쉽게 로그기록을 볼 수 있으며 소프트웨어 오류 시 <bold>이전 배포 버전으로 Rollback</bold> 하는 시스템을 갖춤</content>
            <content>K8의 Pod 자동 스케일링을 쉽개 UI형식으로 보조하는 <bold>OpenShift</bold> 서비스를 이용해 독립된 환경 테스트, 과부하 테스트와 통합 성능 테스트 실현</content>
        </list>
        <list>
            <subject>코드 구성 획일화와 안정성 보장. <bold>TDD 구현</bold></subject>
            <content><bold>JaCoCo</bold>, <bold>Jasmine</bold>을 통한 코드 기능 오류 사전 방지</content>
            <content>Eclipse checkstyle기능으로 사내 코드 디자인 획일화</content>
        </list>
        <list>
            <subject>API 기반의 테스팅 자동화</subject>
            <content>새로 추가된 서비스는 항상 API 기반의 호출이 가능하게 해서 각 환경(DEV,UAT,QA,PROD)마다 테스트 케이스들을 추가하여 프로그램의 안정성 보장</content>
            <content><bold>Postman</bold>의 API 호출 자동화, 혹은 테스팅 팀/ 테스팅 프로그램의 보조로 테스트 결과를 확인 후 배포 결정</content>
        </list>
        <list>
            <subject><bold>Dockers</bold>로 Integration Testing tool 개발</subject>
            <content>개발자들의 효율적이고 빠른 로컬 테스팅을 위해 <bold>Integration Testing</bold> 기능을 Docker로 구현하여 불필요한 개별적 서비스 설치 우회</content>
            <content>Docker의 연결/설정 의존도를 Configuration화 하여 Kubernetes에서도 쉽게 프로그램이 돌아 갈 수 있게 통일함(Portability 증가)</content>
        </list>
        <list>
            <subject>Vera Code</subject>
            <content>CI/CD 자동화 스테이지 중 코드를 Veracode 소프트웨어를 사용해 코드 보안 수준을 확인하고 잠재적 보안 위험 요소를 방지하는 작업을 처리</content>
        </list>
    </skill>
    <skill id="cloud-service">
        <list>
            <subject>AWS 서비스들</subject>
            <content>다량의 반복되지 않는 주문 데이터를 저장하기 위해 <bold>Auto-Scaling과 Partitioning</bold>이 용이한 AWS <bold>Dynamo</bold>를 선택. Dynamo에 CRUD 활동을 감지하는 <bold>Kinesis</bold>를 연결한 뒤 Kafka 데이터 셋과 호환이 되게끔 <bold>Lambda</bold>를 사용해 실시간 <bold>event pipeline을 구축</bold></content>
            <content>다양한 고객 문서와 보고서, 데이터 분석 결과를 <bold>AWS S3 버킷</bold>으로 업로드하거나 다운로드</content>
            <content><bold>Python과 GoLang으로 AWS Lambda</bold>를 제작하여 필요한 서비스에 Severless 데이터 변경을 지원</content>
            <content>관계형 DB의 클라우드 <bold>AWS RDS 서비스</bold>를 JavaSpring에서 연결하여 사용해 서버구축의 시간과 비용을 절감</content>
            <content>적합한 <bold>IAM 권한 설정</bold>으로 사용자의 접근을 제어하고 이력을 참고</content>
            <content><bold>Security Group설정 / ACL설정</bold>으로 네트워크의 접근을 제어를 해 보안을 강화</content>
        </list>
        <list>
            <subject>Kafka Confluent</subject>
            <content>Kafka 사설서버의 설정 시간과 노력이 많이 들어 서버가 필요없는 <bold>Confluent 클라우드 Kafka</bold>로 이전</content>
        </list>
        <list>
            <subject>MongoDB Atlas</subject>
            <content>Key-Value pair 기반의 클라우드 NoSQL DB을 적극적으로 활용</content>
            <content>IP기반의 접속 제한, LDAP 통합, 사용자 권한 제어등 다양한 보안 기능을 제공</content>
        </list>
        <list>
            <subject>MS Aurora DB</subject>
            <content>MySQL, PostgreSQL과 호환성이 강력해 다른 서비스 업체나 제휴 업체의 개발부서에서 접근 가능한 MS Aurora DB로 지정</content>
            <content><bold>Fault-Tolerant와 Self-Healing</bold>의 기능을 제공해 DB가 다운되는 일을 방지</content>
        </list>
        <list>
            <subject>SumoLogic</subject>
            <content>실시간으로 로깅된 내용과 파일들을 빠르고 쉽게 원격으로 접근 할 수 있도록 하는 클라우드 기반의 중앙 기록소</content>
            <content>효과적이고 정확한 디버깅이 가능하고 원격으로 접근이 가능하여 재빠른 디버깅 툴로 활용</content>
            <content>모든 서버 인스턴스들의 로그기록을 시간대 별로 한눈에 볼 수 있어 <bold>Race Condition</bold>을 포함한 다양한 버그 픽스에 용이함</content>
        </list>
    </skill>
    <skill id="extra">
        <list>
            <subject>SCRUM & AGILE</subject>
            <content>SCRUM 방식의 프로젝트로 꾸준한 Daily Standup과 프로덕트 미팅 통해 AGILE 개발 경험</content>
            <content>프로덕트 매니져(PM), 비지니스 파트너, 다른 개발인력들과의 꾸준한 소통과 계획 발표로 개발 속도와 퀄리티를 가속화</content>
        </list>
        <list>
            <subject>JFrog</subject>
            <content>회사 코드기반의 아티팩트/패키지를 보다 안전하게 원격으로 접근하고 권한이 주어진 사용자에게 효율적으로 라이브러리를 재배포 하기위한 서비스를 이용</content>
        </list>
        <list>
            <subject>Maven</subject>
            <content>XML 설정 기반으로 자바 스프링 프로젝트의 패키지 디펜더시 관리와 유지를 위해 사용</content>
        </list>
        <list>
            <subject>Gradle</subject>
            <content>DSL 기반으로 코틀린/그루비 스프링 프로젝트의 패키지 디펜더시 관리와 유지를 위해 사용</content>
        </list>
        <list>
            <subject>Visual Cron</subject>
            <content>프로세스 일정설정, 스크립트 파일 실행, 파일 업로드/다운로드, 알림, 분석, 로그와 같은 다양한 기능을 제공하는 UI기반 프로세스 자동화 프로그램을 활용해 다수의 어플리케이션을 자동화함</content>
        </list>
        <list>
            <subject>Virtual Machine(VDI/VM VirtualBox)</subject>
            <content>가상환경에서 실행되는 독립적인 OS로 외부자의 접근 방지와 분리된 권한으로 보다 안전한 코드 공유와 개발 환경 조성. 코드와 이벤트를 모니터링을 하여 기업정보를 보호하는 개발환경에서 개발을 수행</content>
        </list>
    </skill>

</skills>
